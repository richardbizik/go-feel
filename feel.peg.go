package main

// Code generated by peg ./feel.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleExpression
	ruleExpression10
	ruleTextualExpressions
	ruleTextualExpression
	ruleExpression2
	ruleExpression3
	ruleExpression4
	ruleExpression5
	ruleExpression6
	ruleExpression7
	ruleExpression8
	ruleExpression9
	ruleSimpleExpressions
	ruleSimpleExpression
	ruleArithmeticExpression
	ruleArithmeticExpression2
	ruleArithmeticExpression3
	ruleArithmeticExpression4
	ruleUnaryTests
	rulePositiveUnaryTests
	rulePositiveUnaryTest
	ruleSimpleUnaryTests
	ruleSimplePositiveUnaryTests
	ruleSimplePositiveUnaryTest
	ruleEndpoint
	ruleSimpleValue
	ruleLiteral
	ruleSimpleLiteral
	ruleBooleanLiteral
	ruleDateTimeLiteral
	ruleStringLiteral
	ruleVerticalSpace
	ruleNumericLiteral
	ruleDigits
	ruleDigit
	ruleQualifiedName
	ruleName
	ruleNameStart
	ruleNamePart
	ruleNameStartChar
	ruleNamePartChar
	ruleAdditionalNameSymbols
	ruleInterval
	ruleOpenIntervalStart
	ruleClosedIntervalStart
	ruleOpenIntervalEnd
	ruleClosedIntervalEnd
	ruleForExpression
	ruleIfExpression
	ruleQuantifiedExpression
	ruleDisjunction
	ruleConjunction
	ruleComparison
	ruleInstanceOf
	ruleType
	rulePathExpression
	ruleFilterExpression
	ruleFunctionInvocation
	ruleParameters
	ruleNamedParameters
	ruleParameterName
	rulePositionalParameters
	ruleBoxedExpression
	ruleList
	ruleFunctionDefinition
	ruleFormalParameter
	ruleContext
	ruleContextEntry
	ruleKey
	ruleCharacter
)

var rul3s = [...]string{
	"Unknown",
	"Expression",
	"Expression10",
	"TextualExpressions",
	"TextualExpression",
	"Expression2",
	"Expression3",
	"Expression4",
	"Expression5",
	"Expression6",
	"Expression7",
	"Expression8",
	"Expression9",
	"SimpleExpressions",
	"SimpleExpression",
	"ArithmeticExpression",
	"ArithmeticExpression2",
	"ArithmeticExpression3",
	"ArithmeticExpression4",
	"UnaryTests",
	"PositiveUnaryTests",
	"PositiveUnaryTest",
	"SimpleUnaryTests",
	"SimplePositiveUnaryTests",
	"SimplePositiveUnaryTest",
	"Endpoint",
	"SimpleValue",
	"Literal",
	"SimpleLiteral",
	"BooleanLiteral",
	"DateTimeLiteral",
	"StringLiteral",
	"VerticalSpace",
	"NumericLiteral",
	"Digits",
	"Digit",
	"QualifiedName",
	"Name",
	"NameStart",
	"NamePart",
	"NameStartChar",
	"NamePartChar",
	"AdditionalNameSymbols",
	"Interval",
	"OpenIntervalStart",
	"ClosedIntervalStart",
	"OpenIntervalEnd",
	"ClosedIntervalEnd",
	"ForExpression",
	"IfExpression",
	"QuantifiedExpression",
	"Disjunction",
	"Conjunction",
	"Comparison",
	"InstanceOf",
	"Type",
	"PathExpression",
	"FilterExpression",
	"FunctionInvocation",
	"Parameters",
	"NamedParameters",
	"ParameterName",
	"PositionalParameters",
	"BoxedExpression",
	"List",
	"FunctionDefinition",
	"FormalParameter",
	"Context",
	"ContextEntry",
	"Key",
	"Character",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Expression struct {
	Buffer string
	buffer []rune
	rules  [71]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Expression) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Expression) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Expression
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Expression) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Expression) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Expression) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Expression) error {
	return func(p *Expression) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Expression) error {
	return func(p *Expression) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Expression) Init(options ...func(*Expression) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Expression <- <TextualExpression> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleTextualExpression]() {
					goto l0
				}
				add(ruleExpression, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expression10 <- <BoxedExpression> */
		func() bool {
			position2, tokenIndex2 := position, tokenIndex
			{
				position3 := position
				if !_rules[ruleBoxedExpression]() {
					goto l2
				}
				add(ruleExpression10, position3)
			}
			return true
		l2:
			position, tokenIndex = position2, tokenIndex2
			return false
		},
		/* 2 TextualExpressions <- <(TextualExpression (',' TextualExpression)*)> */
		nil,
		/* 3 TextualExpression <- <(FunctionDefinition / ForExpression / IfExpression / QuantifiedExpression / Expression2)> */
		func() bool {
			position5, tokenIndex5 := position, tokenIndex
			{
				position6 := position
				{
					position7, tokenIndex7 := position, tokenIndex
					if !_rules[ruleFunctionDefinition]() {
						goto l8
					}
					goto l7
				l8:
					position, tokenIndex = position7, tokenIndex7
					if !_rules[ruleForExpression]() {
						goto l9
					}
					goto l7
				l9:
					position, tokenIndex = position7, tokenIndex7
					if !_rules[ruleIfExpression]() {
						goto l10
					}
					goto l7
				l10:
					position, tokenIndex = position7, tokenIndex7
					if !_rules[ruleQuantifiedExpression]() {
						goto l11
					}
					goto l7
				l11:
					position, tokenIndex = position7, tokenIndex7
					if !_rules[ruleExpression2]() {
						goto l5
					}
				}
			l7:
				add(ruleTextualExpression, position6)
			}
			return true
		l5:
			position, tokenIndex = position5, tokenIndex5
			return false
		},
		/* 4 Expression2 <- <Disjunction> */
		func() bool {
			position12, tokenIndex12 := position, tokenIndex
			{
				position13 := position
				if !_rules[ruleDisjunction]() {
					goto l12
				}
				add(ruleExpression2, position13)
			}
			return true
		l12:
			position, tokenIndex = position12, tokenIndex12
			return false
		},
		/* 5 Expression3 <- <Conjunction> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				if !_rules[ruleConjunction]() {
					goto l14
				}
				add(ruleExpression3, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 6 Expression4 <- <(Comparison / Expression5)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				{
					position18, tokenIndex18 := position, tokenIndex
					if !_rules[ruleComparison]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position18, tokenIndex18
					if !_rules[ruleExpression5]() {
						goto l16
					}
				}
			l18:
				add(ruleExpression4, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 7 Expression5 <- <ArithmeticExpression> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				if !_rules[ruleArithmeticExpression]() {
					goto l20
				}
				add(ruleExpression5, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 8 Expression6 <- <(InstanceOf / Expression7)> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				{
					position24, tokenIndex24 := position, tokenIndex
					if !_rules[ruleInstanceOf]() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position24, tokenIndex24
					if !_rules[ruleExpression7]() {
						goto l22
					}
				}
			l24:
				add(ruleExpression6, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 9 Expression7 <- <PathExpression> */
		func() bool {
			position26, tokenIndex26 := position, tokenIndex
			{
				position27 := position
				if !_rules[rulePathExpression]() {
					goto l26
				}
				add(ruleExpression7, position27)
			}
			return true
		l26:
			position, tokenIndex = position26, tokenIndex26
			return false
		},
		/* 10 Expression8 <- <(FilterExpression / FunctionInvocation / Expression9)> */
		func() bool {
			position28, tokenIndex28 := position, tokenIndex
			{
				position29 := position
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[ruleFilterExpression]() {
						goto l31
					}
					goto l30
				l31:
					position, tokenIndex = position30, tokenIndex30
					if !_rules[ruleFunctionInvocation]() {
						goto l32
					}
					goto l30
				l32:
					position, tokenIndex = position30, tokenIndex30
					if !_rules[ruleExpression9]() {
						goto l28
					}
				}
			l30:
				add(ruleExpression8, position29)
			}
			return true
		l28:
			position, tokenIndex = position28, tokenIndex28
			return false
		},
		/* 11 Expression9 <- <(Literal / Name / SimplePositiveUnaryTest / ('(' TextualExpression ')') / Expression10)> */
		func() bool {
			position33, tokenIndex33 := position, tokenIndex
			{
				position34 := position
				{
					position35, tokenIndex35 := position, tokenIndex
					if !_rules[ruleLiteral]() {
						goto l36
					}
					goto l35
				l36:
					position, tokenIndex = position35, tokenIndex35
					if !_rules[ruleName]() {
						goto l37
					}
					goto l35
				l37:
					position, tokenIndex = position35, tokenIndex35
					if !_rules[ruleSimplePositiveUnaryTest]() {
						goto l38
					}
					goto l35
				l38:
					position, tokenIndex = position35, tokenIndex35
					if buffer[position] != rune('(') {
						goto l39
					}
					position++
					if !_rules[ruleTextualExpression]() {
						goto l39
					}
					if buffer[position] != rune(')') {
						goto l39
					}
					position++
					goto l35
				l39:
					position, tokenIndex = position35, tokenIndex35
					if !_rules[ruleExpression10]() {
						goto l33
					}
				}
			l35:
				add(ruleExpression9, position34)
			}
			return true
		l33:
			position, tokenIndex = position33, tokenIndex33
			return false
		},
		/* 12 SimpleExpressions <- <(SimpleExpression (',' SimpleExpression)*)> */
		nil,
		/* 13 SimpleExpression <- <(ArithmeticExpression / SimpleValue)> */
		nil,
		/* 14 ArithmeticExpression <- <(ArithmeticExpression2 (('+' ArithmeticExpression2) / ('-' ArithmeticExpression2))*)> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleArithmeticExpression2]() {
					goto l42
				}
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					{
						position46, tokenIndex46 := position, tokenIndex
						if buffer[position] != rune('+') {
							goto l47
						}
						position++
						if !_rules[ruleArithmeticExpression2]() {
							goto l47
						}
						goto l46
					l47:
						position, tokenIndex = position46, tokenIndex46
						if buffer[position] != rune('-') {
							goto l45
						}
						position++
						if !_rules[ruleArithmeticExpression2]() {
							goto l45
						}
					}
				l46:
					goto l44
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
				add(ruleArithmeticExpression, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 15 ArithmeticExpression2 <- <(ArithmeticExpression3 (('*' ArithmeticExpression3) / ('/' ArithmeticExpression3))*)> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				if !_rules[ruleArithmeticExpression3]() {
					goto l48
				}
			l50:
				{
					position51, tokenIndex51 := position, tokenIndex
					{
						position52, tokenIndex52 := position, tokenIndex
						if buffer[position] != rune('*') {
							goto l53
						}
						position++
						if !_rules[ruleArithmeticExpression3]() {
							goto l53
						}
						goto l52
					l53:
						position, tokenIndex = position52, tokenIndex52
						if buffer[position] != rune('/') {
							goto l51
						}
						position++
						if !_rules[ruleArithmeticExpression3]() {
							goto l51
						}
					}
				l52:
					goto l50
				l51:
					position, tokenIndex = position51, tokenIndex51
				}
				add(ruleArithmeticExpression2, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 16 ArithmeticExpression3 <- <(ArithmeticExpression4 ('*' '*' ArithmeticExpression4)*)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if !_rules[ruleArithmeticExpression4]() {
					goto l54
				}
			l56:
				{
					position57, tokenIndex57 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l57
					}
					position++
					if buffer[position] != rune('*') {
						goto l57
					}
					position++
					if !_rules[ruleArithmeticExpression4]() {
						goto l57
					}
					goto l56
				l57:
					position, tokenIndex = position57, tokenIndex57
				}
				add(ruleArithmeticExpression3, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 17 ArithmeticExpression4 <- <('-'? Expression6)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				{
					position60, tokenIndex60 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l60
					}
					position++
					goto l61
				l60:
					position, tokenIndex = position60, tokenIndex60
				}
			l61:
				if !_rules[ruleExpression6]() {
					goto l58
				}
				add(ruleArithmeticExpression4, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 18 UnaryTests <- <('-' / (('n' / 'N') ('o' / 'O') ('t' / 'T') '(' PositiveUnaryTests ')') / PositiveUnaryTests)> */
		nil,
		/* 19 PositiveUnaryTests <- <(PositiveUnaryTest (',' PositiveUnaryTest)*)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if !_rules[rulePositiveUnaryTest]() {
					goto l63
				}
			l65:
				{
					position66, tokenIndex66 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l66
					}
					position++
					if !_rules[rulePositiveUnaryTest]() {
						goto l66
					}
					goto l65
				l66:
					position, tokenIndex = position66, tokenIndex66
				}
				add(rulePositiveUnaryTests, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 20 PositiveUnaryTest <- <((('n' / 'N') ('u' / 'U') ('l' / 'L') ('l' / 'L')) / SimplePositiveUnaryTest)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				{
					position69, tokenIndex69 := position, tokenIndex
					{
						position71, tokenIndex71 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l72
						}
						position++
						goto l71
					l72:
						position, tokenIndex = position71, tokenIndex71
						if buffer[position] != rune('N') {
							goto l70
						}
						position++
					}
				l71:
					{
						position73, tokenIndex73 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l74
						}
						position++
						goto l73
					l74:
						position, tokenIndex = position73, tokenIndex73
						if buffer[position] != rune('U') {
							goto l70
						}
						position++
					}
				l73:
					{
						position75, tokenIndex75 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l76
						}
						position++
						goto l75
					l76:
						position, tokenIndex = position75, tokenIndex75
						if buffer[position] != rune('L') {
							goto l70
						}
						position++
					}
				l75:
					{
						position77, tokenIndex77 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l78
						}
						position++
						goto l77
					l78:
						position, tokenIndex = position77, tokenIndex77
						if buffer[position] != rune('L') {
							goto l70
						}
						position++
					}
				l77:
					goto l69
				l70:
					position, tokenIndex = position69, tokenIndex69
					if !_rules[ruleSimplePositiveUnaryTest]() {
						goto l67
					}
				}
			l69:
				add(rulePositiveUnaryTest, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 21 SimpleUnaryTests <- <('-' / (('n' / 'N') ('o' / 'O') ('t' / 'T') '(' SimplePositiveUnaryTests ')') / SimplePositiveUnaryTests)> */
		nil,
		/* 22 SimplePositiveUnaryTests <- <(SimplePositiveUnaryTest (',' SimplePositiveUnaryTest)*)> */
		nil,
		/* 23 SimplePositiveUnaryTest <- <((('<' / ('<' '=') / '>' / ('>' '='))? Endpoint) / Interval)> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				{
					position83, tokenIndex83 := position, tokenIndex
					{
						position85, tokenIndex85 := position, tokenIndex
						{
							position87, tokenIndex87 := position, tokenIndex
							if buffer[position] != rune('<') {
								goto l88
							}
							position++
							goto l87
						l88:
							position, tokenIndex = position87, tokenIndex87
							if buffer[position] != rune('<') {
								goto l89
							}
							position++
							if buffer[position] != rune('=') {
								goto l89
							}
							position++
							goto l87
						l89:
							position, tokenIndex = position87, tokenIndex87
							if buffer[position] != rune('>') {
								goto l90
							}
							position++
							goto l87
						l90:
							position, tokenIndex = position87, tokenIndex87
							if buffer[position] != rune('>') {
								goto l85
							}
							position++
							if buffer[position] != rune('=') {
								goto l85
							}
							position++
						}
					l87:
						goto l86
					l85:
						position, tokenIndex = position85, tokenIndex85
					}
				l86:
					if !_rules[ruleEndpoint]() {
						goto l84
					}
					goto l83
				l84:
					position, tokenIndex = position83, tokenIndex83
					if !_rules[ruleInterval]() {
						goto l81
					}
				}
			l83:
				add(ruleSimplePositiveUnaryTest, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 24 Endpoint <- <SimpleValue> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if !_rules[ruleSimpleValue]() {
					goto l91
				}
				add(ruleEndpoint, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 25 SimpleValue <- <(SimpleLiteral / QualifiedName)> */
		func() bool {
			position93, tokenIndex93 := position, tokenIndex
			{
				position94 := position
				{
					position95, tokenIndex95 := position, tokenIndex
					if !_rules[ruleSimpleLiteral]() {
						goto l96
					}
					goto l95
				l96:
					position, tokenIndex = position95, tokenIndex95
					if !_rules[ruleQualifiedName]() {
						goto l93
					}
				}
			l95:
				add(ruleSimpleValue, position94)
			}
			return true
		l93:
			position, tokenIndex = position93, tokenIndex93
			return false
		},
		/* 26 Literal <- <((('n' / 'N') ('u' / 'U') ('l' / 'L') ('l' / 'L')) / SimpleLiteral)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				{
					position99, tokenIndex99 := position, tokenIndex
					{
						position101, tokenIndex101 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l102
						}
						position++
						goto l101
					l102:
						position, tokenIndex = position101, tokenIndex101
						if buffer[position] != rune('N') {
							goto l100
						}
						position++
					}
				l101:
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('U') {
							goto l100
						}
						position++
					}
				l103:
					{
						position105, tokenIndex105 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l106
						}
						position++
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if buffer[position] != rune('L') {
							goto l100
						}
						position++
					}
				l105:
					{
						position107, tokenIndex107 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l108
						}
						position++
						goto l107
					l108:
						position, tokenIndex = position107, tokenIndex107
						if buffer[position] != rune('L') {
							goto l100
						}
						position++
					}
				l107:
					goto l99
				l100:
					position, tokenIndex = position99, tokenIndex99
					if !_rules[ruleSimpleLiteral]() {
						goto l97
					}
				}
			l99:
				add(ruleLiteral, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 27 SimpleLiteral <- <(BooleanLiteral / DateTimeLiteral / StringLiteral / NumericLiteral)> */
		func() bool {
			position109, tokenIndex109 := position, tokenIndex
			{
				position110 := position
				{
					position111, tokenIndex111 := position, tokenIndex
					if !_rules[ruleBooleanLiteral]() {
						goto l112
					}
					goto l111
				l112:
					position, tokenIndex = position111, tokenIndex111
					if !_rules[ruleDateTimeLiteral]() {
						goto l113
					}
					goto l111
				l113:
					position, tokenIndex = position111, tokenIndex111
					if !_rules[ruleStringLiteral]() {
						goto l114
					}
					goto l111
				l114:
					position, tokenIndex = position111, tokenIndex111
					if !_rules[ruleNumericLiteral]() {
						goto l109
					}
				}
			l111:
				add(ruleSimpleLiteral, position110)
			}
			return true
		l109:
			position, tokenIndex = position109, tokenIndex109
			return false
		},
		/* 28 BooleanLiteral <- <((('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E')) / (('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E')))> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
				{
					position117, tokenIndex117 := position, tokenIndex
					{
						position119, tokenIndex119 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l120
						}
						position++
						goto l119
					l120:
						position, tokenIndex = position119, tokenIndex119
						if buffer[position] != rune('T') {
							goto l118
						}
						position++
					}
				l119:
					{
						position121, tokenIndex121 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l122
						}
						position++
						goto l121
					l122:
						position, tokenIndex = position121, tokenIndex121
						if buffer[position] != rune('R') {
							goto l118
						}
						position++
					}
				l121:
					{
						position123, tokenIndex123 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l124
						}
						position++
						goto l123
					l124:
						position, tokenIndex = position123, tokenIndex123
						if buffer[position] != rune('U') {
							goto l118
						}
						position++
					}
				l123:
					{
						position125, tokenIndex125 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l126
						}
						position++
						goto l125
					l126:
						position, tokenIndex = position125, tokenIndex125
						if buffer[position] != rune('E') {
							goto l118
						}
						position++
					}
				l125:
					goto l117
				l118:
					position, tokenIndex = position117, tokenIndex117
					{
						position127, tokenIndex127 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l128
						}
						position++
						goto l127
					l128:
						position, tokenIndex = position127, tokenIndex127
						if buffer[position] != rune('F') {
							goto l115
						}
						position++
					}
				l127:
					{
						position129, tokenIndex129 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l130
						}
						position++
						goto l129
					l130:
						position, tokenIndex = position129, tokenIndex129
						if buffer[position] != rune('A') {
							goto l115
						}
						position++
					}
				l129:
					{
						position131, tokenIndex131 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l132
						}
						position++
						goto l131
					l132:
						position, tokenIndex = position131, tokenIndex131
						if buffer[position] != rune('L') {
							goto l115
						}
						position++
					}
				l131:
					{
						position133, tokenIndex133 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l134
						}
						position++
						goto l133
					l134:
						position, tokenIndex = position133, tokenIndex133
						if buffer[position] != rune('S') {
							goto l115
						}
						position++
					}
				l133:
					{
						position135, tokenIndex135 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l136
						}
						position++
						goto l135
					l136:
						position, tokenIndex = position135, tokenIndex135
						if buffer[position] != rune('E') {
							goto l115
						}
						position++
					}
				l135:
				}
			l117:
				add(ruleBooleanLiteral, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 29 DateTimeLiteral <- <(((('d' / 'D') ('a' / 'A') ('t' / 'T') ('e' / 'E')) / (('t' / 'T') ('i' / 'I') ('m' / 'M') ('e' / 'E')) / (('d' / 'D') ('a' / 'A') ('t' / 'T') ('e' / 'E') ' ' ('a' / 'A') ('n' / 'N') ('d' / 'D') ' ' ('t' / 'T') ('i' / 'I') ('m' / 'M') ('e' / 'E')) / (('d' / 'D') ('u' / 'U') ('r' / 'R') ('a' / 'A') ('t' / 'T') ('i' / 'I') ('o' / 'O') ('n' / 'N'))) '(' StringLiteral ')')> */
		func() bool {
			position137, tokenIndex137 := position, tokenIndex
			{
				position138 := position
				{
					position139, tokenIndex139 := position, tokenIndex
					{
						position141, tokenIndex141 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l142
						}
						position++
						goto l141
					l142:
						position, tokenIndex = position141, tokenIndex141
						if buffer[position] != rune('D') {
							goto l140
						}
						position++
					}
				l141:
					{
						position143, tokenIndex143 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l144
						}
						position++
						goto l143
					l144:
						position, tokenIndex = position143, tokenIndex143
						if buffer[position] != rune('A') {
							goto l140
						}
						position++
					}
				l143:
					{
						position145, tokenIndex145 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l146
						}
						position++
						goto l145
					l146:
						position, tokenIndex = position145, tokenIndex145
						if buffer[position] != rune('T') {
							goto l140
						}
						position++
					}
				l145:
					{
						position147, tokenIndex147 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l148
						}
						position++
						goto l147
					l148:
						position, tokenIndex = position147, tokenIndex147
						if buffer[position] != rune('E') {
							goto l140
						}
						position++
					}
				l147:
					goto l139
				l140:
					position, tokenIndex = position139, tokenIndex139
					{
						position150, tokenIndex150 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l151
						}
						position++
						goto l150
					l151:
						position, tokenIndex = position150, tokenIndex150
						if buffer[position] != rune('T') {
							goto l149
						}
						position++
					}
				l150:
					{
						position152, tokenIndex152 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l153
						}
						position++
						goto l152
					l153:
						position, tokenIndex = position152, tokenIndex152
						if buffer[position] != rune('I') {
							goto l149
						}
						position++
					}
				l152:
					{
						position154, tokenIndex154 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l155
						}
						position++
						goto l154
					l155:
						position, tokenIndex = position154, tokenIndex154
						if buffer[position] != rune('M') {
							goto l149
						}
						position++
					}
				l154:
					{
						position156, tokenIndex156 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l157
						}
						position++
						goto l156
					l157:
						position, tokenIndex = position156, tokenIndex156
						if buffer[position] != rune('E') {
							goto l149
						}
						position++
					}
				l156:
					goto l139
				l149:
					position, tokenIndex = position139, tokenIndex139
					{
						position159, tokenIndex159 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l160
						}
						position++
						goto l159
					l160:
						position, tokenIndex = position159, tokenIndex159
						if buffer[position] != rune('D') {
							goto l158
						}
						position++
					}
				l159:
					{
						position161, tokenIndex161 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l162
						}
						position++
						goto l161
					l162:
						position, tokenIndex = position161, tokenIndex161
						if buffer[position] != rune('A') {
							goto l158
						}
						position++
					}
				l161:
					{
						position163, tokenIndex163 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l164
						}
						position++
						goto l163
					l164:
						position, tokenIndex = position163, tokenIndex163
						if buffer[position] != rune('T') {
							goto l158
						}
						position++
					}
				l163:
					{
						position165, tokenIndex165 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l166
						}
						position++
						goto l165
					l166:
						position, tokenIndex = position165, tokenIndex165
						if buffer[position] != rune('E') {
							goto l158
						}
						position++
					}
				l165:
					if buffer[position] != rune(' ') {
						goto l158
					}
					position++
					{
						position167, tokenIndex167 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l168
						}
						position++
						goto l167
					l168:
						position, tokenIndex = position167, tokenIndex167
						if buffer[position] != rune('A') {
							goto l158
						}
						position++
					}
				l167:
					{
						position169, tokenIndex169 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l170
						}
						position++
						goto l169
					l170:
						position, tokenIndex = position169, tokenIndex169
						if buffer[position] != rune('N') {
							goto l158
						}
						position++
					}
				l169:
					{
						position171, tokenIndex171 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l172
						}
						position++
						goto l171
					l172:
						position, tokenIndex = position171, tokenIndex171
						if buffer[position] != rune('D') {
							goto l158
						}
						position++
					}
				l171:
					if buffer[position] != rune(' ') {
						goto l158
					}
					position++
					{
						position173, tokenIndex173 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l174
						}
						position++
						goto l173
					l174:
						position, tokenIndex = position173, tokenIndex173
						if buffer[position] != rune('T') {
							goto l158
						}
						position++
					}
				l173:
					{
						position175, tokenIndex175 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l176
						}
						position++
						goto l175
					l176:
						position, tokenIndex = position175, tokenIndex175
						if buffer[position] != rune('I') {
							goto l158
						}
						position++
					}
				l175:
					{
						position177, tokenIndex177 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l178
						}
						position++
						goto l177
					l178:
						position, tokenIndex = position177, tokenIndex177
						if buffer[position] != rune('M') {
							goto l158
						}
						position++
					}
				l177:
					{
						position179, tokenIndex179 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l180
						}
						position++
						goto l179
					l180:
						position, tokenIndex = position179, tokenIndex179
						if buffer[position] != rune('E') {
							goto l158
						}
						position++
					}
				l179:
					goto l139
				l158:
					position, tokenIndex = position139, tokenIndex139
					{
						position181, tokenIndex181 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l182
						}
						position++
						goto l181
					l182:
						position, tokenIndex = position181, tokenIndex181
						if buffer[position] != rune('D') {
							goto l137
						}
						position++
					}
				l181:
					{
						position183, tokenIndex183 := position, tokenIndex
						if buffer[position] != rune('u') {
							goto l184
						}
						position++
						goto l183
					l184:
						position, tokenIndex = position183, tokenIndex183
						if buffer[position] != rune('U') {
							goto l137
						}
						position++
					}
				l183:
					{
						position185, tokenIndex185 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l186
						}
						position++
						goto l185
					l186:
						position, tokenIndex = position185, tokenIndex185
						if buffer[position] != rune('R') {
							goto l137
						}
						position++
					}
				l185:
					{
						position187, tokenIndex187 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l188
						}
						position++
						goto l187
					l188:
						position, tokenIndex = position187, tokenIndex187
						if buffer[position] != rune('A') {
							goto l137
						}
						position++
					}
				l187:
					{
						position189, tokenIndex189 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l190
						}
						position++
						goto l189
					l190:
						position, tokenIndex = position189, tokenIndex189
						if buffer[position] != rune('T') {
							goto l137
						}
						position++
					}
				l189:
					{
						position191, tokenIndex191 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l192
						}
						position++
						goto l191
					l192:
						position, tokenIndex = position191, tokenIndex191
						if buffer[position] != rune('I') {
							goto l137
						}
						position++
					}
				l191:
					{
						position193, tokenIndex193 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l194
						}
						position++
						goto l193
					l194:
						position, tokenIndex = position193, tokenIndex193
						if buffer[position] != rune('O') {
							goto l137
						}
						position++
					}
				l193:
					{
						position195, tokenIndex195 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l196
						}
						position++
						goto l195
					l196:
						position, tokenIndex = position195, tokenIndex195
						if buffer[position] != rune('N') {
							goto l137
						}
						position++
					}
				l195:
				}
			l139:
				if buffer[position] != rune('(') {
					goto l137
				}
				position++
				if !_rules[ruleStringLiteral]() {
					goto l137
				}
				if buffer[position] != rune(')') {
					goto l137
				}
				position++
				add(ruleDateTimeLiteral, position138)
			}
			return true
		l137:
			position, tokenIndex = position137, tokenIndex137
			return false
		},
		/* 30 StringLiteral <- <('"' (!('"' / VerticalSpace) Character)* '"')> */
		func() bool {
			position197, tokenIndex197 := position, tokenIndex
			{
				position198 := position
				if buffer[position] != rune('"') {
					goto l197
				}
				position++
			l199:
				{
					position200, tokenIndex200 := position, tokenIndex
					{
						position201, tokenIndex201 := position, tokenIndex
						{
							position202, tokenIndex202 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l203
							}
							position++
							goto l202
						l203:
							position, tokenIndex = position202, tokenIndex202
							if !_rules[ruleVerticalSpace]() {
								goto l201
							}
						}
					l202:
						goto l200
					l201:
						position, tokenIndex = position201, tokenIndex201
					}
					if !_rules[ruleCharacter]() {
						goto l200
					}
					goto l199
				l200:
					position, tokenIndex = position200, tokenIndex200
				}
				if buffer[position] != rune('"') {
					goto l197
				}
				position++
				add(ruleStringLiteral, position198)
			}
			return true
		l197:
			position, tokenIndex = position197, tokenIndex197
			return false
		},
		/* 31 VerticalSpace <- <[\x00-\r]> */
		func() bool {
			position204, tokenIndex204 := position, tokenIndex
			{
				position205 := position
				if c := buffer[position]; c < rune('\x00') || c > rune('\r') {
					goto l204
				}
				position++
				add(ruleVerticalSpace, position205)
			}
			return true
		l204:
			position, tokenIndex = position204, tokenIndex204
			return false
		},
		/* 32 NumericLiteral <- <('-'? ((Digits ('.' Digits)?) / ('.' Digits)))> */
		func() bool {
			position206, tokenIndex206 := position, tokenIndex
			{
				position207 := position
				{
					position208, tokenIndex208 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l208
					}
					position++
					goto l209
				l208:
					position, tokenIndex = position208, tokenIndex208
				}
			l209:
				{
					position210, tokenIndex210 := position, tokenIndex
					if !_rules[ruleDigits]() {
						goto l211
					}
					{
						position212, tokenIndex212 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l212
						}
						position++
						if !_rules[ruleDigits]() {
							goto l212
						}
						goto l213
					l212:
						position, tokenIndex = position212, tokenIndex212
					}
				l213:
					goto l210
				l211:
					position, tokenIndex = position210, tokenIndex210
					if buffer[position] != rune('.') {
						goto l206
					}
					position++
					if !_rules[ruleDigits]() {
						goto l206
					}
				}
			l210:
				add(ruleNumericLiteral, position207)
			}
			return true
		l206:
			position, tokenIndex = position206, tokenIndex206
			return false
		},
		/* 33 Digits <- <(Digit Digit*)> */
		func() bool {
			position214, tokenIndex214 := position, tokenIndex
			{
				position215 := position
				if !_rules[ruleDigit]() {
					goto l214
				}
			l216:
				{
					position217, tokenIndex217 := position, tokenIndex
					if !_rules[ruleDigit]() {
						goto l217
					}
					goto l216
				l217:
					position, tokenIndex = position217, tokenIndex217
				}
				add(ruleDigits, position215)
			}
			return true
		l214:
			position, tokenIndex = position214, tokenIndex214
			return false
		},
		/* 34 Digit <- <[0-9]> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l218
				}
				position++
				add(ruleDigit, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 35 QualifiedName <- <(Name ('.' Name)*)> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				if !_rules[ruleName]() {
					goto l220
				}
			l222:
				{
					position223, tokenIndex223 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l223
					}
					position++
					if !_rules[ruleName]() {
						goto l223
					}
					goto l222
				l223:
					position, tokenIndex = position223, tokenIndex223
				}
				add(ruleQualifiedName, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 36 Name <- <(NameStart (NamePart / AdditionalNameSymbols)*)> */
		func() bool {
			position224, tokenIndex224 := position, tokenIndex
			{
				position225 := position
				if !_rules[ruleNameStart]() {
					goto l224
				}
			l226:
				{
					position227, tokenIndex227 := position, tokenIndex
					{
						position228, tokenIndex228 := position, tokenIndex
						if !_rules[ruleNamePart]() {
							goto l229
						}
						goto l228
					l229:
						position, tokenIndex = position228, tokenIndex228
						if !_rules[ruleAdditionalNameSymbols]() {
							goto l227
						}
					}
				l228:
					goto l226
				l227:
					position, tokenIndex = position227, tokenIndex227
				}
				add(ruleName, position225)
			}
			return true
		l224:
			position, tokenIndex = position224, tokenIndex224
			return false
		},
		/* 37 NameStart <- <(NameStartChar NamePartChar*)> */
		func() bool {
			position230, tokenIndex230 := position, tokenIndex
			{
				position231 := position
				if !_rules[ruleNameStartChar]() {
					goto l230
				}
			l232:
				{
					position233, tokenIndex233 := position, tokenIndex
					if !_rules[ruleNamePartChar]() {
						goto l233
					}
					goto l232
				l233:
					position, tokenIndex = position233, tokenIndex233
				}
				add(ruleNameStart, position231)
			}
			return true
		l230:
			position, tokenIndex = position230, tokenIndex230
			return false
		},
		/* 38 NamePart <- <NamePartChar+> */
		func() bool {
			position234, tokenIndex234 := position, tokenIndex
			{
				position235 := position
				if !_rules[ruleNamePartChar]() {
					goto l234
				}
			l236:
				{
					position237, tokenIndex237 := position, tokenIndex
					if !_rules[ruleNamePartChar]() {
						goto l237
					}
					goto l236
				l237:
					position, tokenIndex = position237, tokenIndex237
				}
				add(ruleNamePart, position235)
			}
			return true
		l234:
			position, tokenIndex = position234, tokenIndex234
			return false
		},
		/* 39 NameStartChar <- <('?' / [A-Z] / '_' / [a-z] / [À-Ö] / [Ø-ö] / [ø-˿] / [Ͱ-ͽ] / [Ϳ-\u1fff] / [\u200c-\u200d] / [⁰-\u218f] / [Ⰰ-\u2fef] / [、-\ud7ff] / [豈-﷏] / [ﷰ-�])> */
		func() bool {
			position238, tokenIndex238 := position, tokenIndex
			{
				position239 := position
				{
					position240, tokenIndex240 := position, tokenIndex
					if buffer[position] != rune('?') {
						goto l241
					}
					position++
					goto l240
				l241:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l242
					}
					position++
					goto l240
				l242:
					position, tokenIndex = position240, tokenIndex240
					if buffer[position] != rune('_') {
						goto l243
					}
					position++
					goto l240
				l243:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l244
					}
					position++
					goto l240
				l244:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('À') || c > rune('Ö') {
						goto l245
					}
					position++
					goto l240
				l245:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('Ø') || c > rune('ö') {
						goto l246
					}
					position++
					goto l240
				l246:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('ø') || c > rune('˿') {
						goto l247
					}
					position++
					goto l240
				l247:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('Ͱ') || c > rune('ͽ') {
						goto l248
					}
					position++
					goto l240
				l248:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('Ϳ') || c > rune('\u1fff') {
						goto l249
					}
					position++
					goto l240
				l249:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('\u200c') || c > rune('\u200d') {
						goto l250
					}
					position++
					goto l240
				l250:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('⁰') || c > rune('\u218f') {
						goto l251
					}
					position++
					goto l240
				l251:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('Ⰰ') || c > rune('\u2fef') {
						goto l252
					}
					position++
					goto l240
				l252:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('、') || c > rune('\ud7ff') {
						goto l253
					}
					position++
					goto l240
				l253:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('豈') || c > rune('﷏') {
						goto l254
					}
					position++
					goto l240
				l254:
					position, tokenIndex = position240, tokenIndex240
					if c := buffer[position]; c < rune('ﷰ') || c > rune('�') {
						goto l238
					}
					position++
				}
			l240:
				add(ruleNameStartChar, position239)
			}
			return true
		l238:
			position, tokenIndex = position238, tokenIndex238
			return false
		},
		/* 40 NamePartChar <- <(NameStartChar / Digit / '·' / [̀-ͯ] / [‿-⁀])> */
		func() bool {
			position255, tokenIndex255 := position, tokenIndex
			{
				position256 := position
				{
					position257, tokenIndex257 := position, tokenIndex
					if !_rules[ruleNameStartChar]() {
						goto l258
					}
					goto l257
				l258:
					position, tokenIndex = position257, tokenIndex257
					if !_rules[ruleDigit]() {
						goto l259
					}
					goto l257
				l259:
					position, tokenIndex = position257, tokenIndex257
					if buffer[position] != rune('·') {
						goto l260
					}
					position++
					goto l257
				l260:
					position, tokenIndex = position257, tokenIndex257
					if c := buffer[position]; c < rune('̀') || c > rune('ͯ') {
						goto l261
					}
					position++
					goto l257
				l261:
					position, tokenIndex = position257, tokenIndex257
					if c := buffer[position]; c < rune('‿') || c > rune('⁀') {
						goto l255
					}
					position++
				}
			l257:
				add(ruleNamePartChar, position256)
			}
			return true
		l255:
			position, tokenIndex = position255, tokenIndex255
			return false
		},
		/* 41 AdditionalNameSymbols <- <('.' / '/' / '-' / '’' / '+' / '*')> */
		func() bool {
			position262, tokenIndex262 := position, tokenIndex
			{
				position263 := position
				{
					position264, tokenIndex264 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l265
					}
					position++
					goto l264
				l265:
					position, tokenIndex = position264, tokenIndex264
					if buffer[position] != rune('/') {
						goto l266
					}
					position++
					goto l264
				l266:
					position, tokenIndex = position264, tokenIndex264
					if buffer[position] != rune('-') {
						goto l267
					}
					position++
					goto l264
				l267:
					position, tokenIndex = position264, tokenIndex264
					if buffer[position] != rune('’') {
						goto l268
					}
					position++
					goto l264
				l268:
					position, tokenIndex = position264, tokenIndex264
					if buffer[position] != rune('+') {
						goto l269
					}
					position++
					goto l264
				l269:
					position, tokenIndex = position264, tokenIndex264
					if buffer[position] != rune('*') {
						goto l262
					}
					position++
				}
			l264:
				add(ruleAdditionalNameSymbols, position263)
			}
			return true
		l262:
			position, tokenIndex = position262, tokenIndex262
			return false
		},
		/* 42 Interval <- <((OpenIntervalStart / ClosedIntervalStart) Endpoint ('.' '.') Endpoint (OpenIntervalEnd / ClosedIntervalEnd))> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				{
					position272, tokenIndex272 := position, tokenIndex
					if !_rules[ruleOpenIntervalStart]() {
						goto l273
					}
					goto l272
				l273:
					position, tokenIndex = position272, tokenIndex272
					if !_rules[ruleClosedIntervalStart]() {
						goto l270
					}
				}
			l272:
				if !_rules[ruleEndpoint]() {
					goto l270
				}
				if buffer[position] != rune('.') {
					goto l270
				}
				position++
				if buffer[position] != rune('.') {
					goto l270
				}
				position++
				if !_rules[ruleEndpoint]() {
					goto l270
				}
				{
					position274, tokenIndex274 := position, tokenIndex
					if !_rules[ruleOpenIntervalEnd]() {
						goto l275
					}
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					if !_rules[ruleClosedIntervalEnd]() {
						goto l270
					}
				}
			l274:
				add(ruleInterval, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 43 OpenIntervalStart <- <('(' / ']')> */
		func() bool {
			position276, tokenIndex276 := position, tokenIndex
			{
				position277 := position
				{
					position278, tokenIndex278 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l279
					}
					position++
					goto l278
				l279:
					position, tokenIndex = position278, tokenIndex278
					if buffer[position] != rune(']') {
						goto l276
					}
					position++
				}
			l278:
				add(ruleOpenIntervalStart, position277)
			}
			return true
		l276:
			position, tokenIndex = position276, tokenIndex276
			return false
		},
		/* 44 ClosedIntervalStart <- <'['> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				if buffer[position] != rune('[') {
					goto l280
				}
				position++
				add(ruleClosedIntervalStart, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		/* 45 OpenIntervalEnd <- <(')' / '[')> */
		func() bool {
			position282, tokenIndex282 := position, tokenIndex
			{
				position283 := position
				{
					position284, tokenIndex284 := position, tokenIndex
					if buffer[position] != rune(')') {
						goto l285
					}
					position++
					goto l284
				l285:
					position, tokenIndex = position284, tokenIndex284
					if buffer[position] != rune('[') {
						goto l282
					}
					position++
				}
			l284:
				add(ruleOpenIntervalEnd, position283)
			}
			return true
		l282:
			position, tokenIndex = position282, tokenIndex282
			return false
		},
		/* 46 ClosedIntervalEnd <- <']'> */
		func() bool {
			position286, tokenIndex286 := position, tokenIndex
			{
				position287 := position
				if buffer[position] != rune(']') {
					goto l286
				}
				position++
				add(ruleClosedIntervalEnd, position287)
			}
			return true
		l286:
			position, tokenIndex = position286, tokenIndex286
			return false
		},
		/* 47 ForExpression <- <(('f' / 'F') ('o' / 'O') ('r' / 'R') Name (('i' / 'I') ('n' / 'N')) Expression (',' Name (('i' / 'I') ('n' / 'N')) Expression)* (('r' / 'R') ('e' / 'E') ('t' / 'T') ('u' / 'U') ('r' / 'R') ('n' / 'N')) Expression)> */
		func() bool {
			position288, tokenIndex288 := position, tokenIndex
			{
				position289 := position
				{
					position290, tokenIndex290 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l291
					}
					position++
					goto l290
				l291:
					position, tokenIndex = position290, tokenIndex290
					if buffer[position] != rune('F') {
						goto l288
					}
					position++
				}
			l290:
				{
					position292, tokenIndex292 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l293
					}
					position++
					goto l292
				l293:
					position, tokenIndex = position292, tokenIndex292
					if buffer[position] != rune('O') {
						goto l288
					}
					position++
				}
			l292:
				{
					position294, tokenIndex294 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l295
					}
					position++
					goto l294
				l295:
					position, tokenIndex = position294, tokenIndex294
					if buffer[position] != rune('R') {
						goto l288
					}
					position++
				}
			l294:
				if !_rules[ruleName]() {
					goto l288
				}
				{
					position296, tokenIndex296 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l297
					}
					position++
					goto l296
				l297:
					position, tokenIndex = position296, tokenIndex296
					if buffer[position] != rune('I') {
						goto l288
					}
					position++
				}
			l296:
				{
					position298, tokenIndex298 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l299
					}
					position++
					goto l298
				l299:
					position, tokenIndex = position298, tokenIndex298
					if buffer[position] != rune('N') {
						goto l288
					}
					position++
				}
			l298:
				if !_rules[ruleExpression]() {
					goto l288
				}
			l300:
				{
					position301, tokenIndex301 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l301
					}
					position++
					if !_rules[ruleName]() {
						goto l301
					}
					{
						position302, tokenIndex302 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l303
						}
						position++
						goto l302
					l303:
						position, tokenIndex = position302, tokenIndex302
						if buffer[position] != rune('I') {
							goto l301
						}
						position++
					}
				l302:
					{
						position304, tokenIndex304 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l305
						}
						position++
						goto l304
					l305:
						position, tokenIndex = position304, tokenIndex304
						if buffer[position] != rune('N') {
							goto l301
						}
						position++
					}
				l304:
					if !_rules[ruleExpression]() {
						goto l301
					}
					goto l300
				l301:
					position, tokenIndex = position301, tokenIndex301
				}
				{
					position306, tokenIndex306 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l307
					}
					position++
					goto l306
				l307:
					position, tokenIndex = position306, tokenIndex306
					if buffer[position] != rune('R') {
						goto l288
					}
					position++
				}
			l306:
				{
					position308, tokenIndex308 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l309
					}
					position++
					goto l308
				l309:
					position, tokenIndex = position308, tokenIndex308
					if buffer[position] != rune('E') {
						goto l288
					}
					position++
				}
			l308:
				{
					position310, tokenIndex310 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l311
					}
					position++
					goto l310
				l311:
					position, tokenIndex = position310, tokenIndex310
					if buffer[position] != rune('T') {
						goto l288
					}
					position++
				}
			l310:
				{
					position312, tokenIndex312 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l313
					}
					position++
					goto l312
				l313:
					position, tokenIndex = position312, tokenIndex312
					if buffer[position] != rune('U') {
						goto l288
					}
					position++
				}
			l312:
				{
					position314, tokenIndex314 := position, tokenIndex
					if buffer[position] != rune('r') {
						goto l315
					}
					position++
					goto l314
				l315:
					position, tokenIndex = position314, tokenIndex314
					if buffer[position] != rune('R') {
						goto l288
					}
					position++
				}
			l314:
				{
					position316, tokenIndex316 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l317
					}
					position++
					goto l316
				l317:
					position, tokenIndex = position316, tokenIndex316
					if buffer[position] != rune('N') {
						goto l288
					}
					position++
				}
			l316:
				if !_rules[ruleExpression]() {
					goto l288
				}
				add(ruleForExpression, position289)
			}
			return true
		l288:
			position, tokenIndex = position288, tokenIndex288
			return false
		},
		/* 48 IfExpression <- <(('i' / 'I') ('f' / 'F') Expression (('t' / 'T') ('h' / 'H') ('e' / 'E') ('n' / 'N')) Expression (('e' / 'E') ('l' / 'L') ('s' / 'S') ('e' / 'E')) Expression)> */
		func() bool {
			position318, tokenIndex318 := position, tokenIndex
			{
				position319 := position
				{
					position320, tokenIndex320 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l321
					}
					position++
					goto l320
				l321:
					position, tokenIndex = position320, tokenIndex320
					if buffer[position] != rune('I') {
						goto l318
					}
					position++
				}
			l320:
				{
					position322, tokenIndex322 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l323
					}
					position++
					goto l322
				l323:
					position, tokenIndex = position322, tokenIndex322
					if buffer[position] != rune('F') {
						goto l318
					}
					position++
				}
			l322:
				if !_rules[ruleExpression]() {
					goto l318
				}
				{
					position324, tokenIndex324 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l325
					}
					position++
					goto l324
				l325:
					position, tokenIndex = position324, tokenIndex324
					if buffer[position] != rune('T') {
						goto l318
					}
					position++
				}
			l324:
				{
					position326, tokenIndex326 := position, tokenIndex
					if buffer[position] != rune('h') {
						goto l327
					}
					position++
					goto l326
				l327:
					position, tokenIndex = position326, tokenIndex326
					if buffer[position] != rune('H') {
						goto l318
					}
					position++
				}
			l326:
				{
					position328, tokenIndex328 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l329
					}
					position++
					goto l328
				l329:
					position, tokenIndex = position328, tokenIndex328
					if buffer[position] != rune('E') {
						goto l318
					}
					position++
				}
			l328:
				{
					position330, tokenIndex330 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l331
					}
					position++
					goto l330
				l331:
					position, tokenIndex = position330, tokenIndex330
					if buffer[position] != rune('N') {
						goto l318
					}
					position++
				}
			l330:
				if !_rules[ruleExpression]() {
					goto l318
				}
				{
					position332, tokenIndex332 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l333
					}
					position++
					goto l332
				l333:
					position, tokenIndex = position332, tokenIndex332
					if buffer[position] != rune('E') {
						goto l318
					}
					position++
				}
			l332:
				{
					position334, tokenIndex334 := position, tokenIndex
					if buffer[position] != rune('l') {
						goto l335
					}
					position++
					goto l334
				l335:
					position, tokenIndex = position334, tokenIndex334
					if buffer[position] != rune('L') {
						goto l318
					}
					position++
				}
			l334:
				{
					position336, tokenIndex336 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l337
					}
					position++
					goto l336
				l337:
					position, tokenIndex = position336, tokenIndex336
					if buffer[position] != rune('S') {
						goto l318
					}
					position++
				}
			l336:
				{
					position338, tokenIndex338 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l339
					}
					position++
					goto l338
				l339:
					position, tokenIndex = position338, tokenIndex338
					if buffer[position] != rune('E') {
						goto l318
					}
					position++
				}
			l338:
				if !_rules[ruleExpression]() {
					goto l318
				}
				add(ruleIfExpression, position319)
			}
			return true
		l318:
			position, tokenIndex = position318, tokenIndex318
			return false
		},
		/* 49 QuantifiedExpression <- <(((('s' / 'S') ('o' / 'O') ('m' / 'M') ('e' / 'E')) / (('e' / 'E') ('v' / 'V') ('e' / 'E') ('r' / 'R') ('y' / 'Y'))) (Name (('i' / 'I') ('n' / 'N')) Expression)+ (('s' / 'S') ('a' / 'A') ('t' / 'T') ('i' / 'I') ('s' / 'S') ('f' / 'F') ('i' / 'I') ('e' / 'E') ('s' / 'S')) Expression)> */
		func() bool {
			position340, tokenIndex340 := position, tokenIndex
			{
				position341 := position
				{
					position342, tokenIndex342 := position, tokenIndex
					{
						position344, tokenIndex344 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l345
						}
						position++
						goto l344
					l345:
						position, tokenIndex = position344, tokenIndex344
						if buffer[position] != rune('S') {
							goto l343
						}
						position++
					}
				l344:
					{
						position346, tokenIndex346 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l347
						}
						position++
						goto l346
					l347:
						position, tokenIndex = position346, tokenIndex346
						if buffer[position] != rune('O') {
							goto l343
						}
						position++
					}
				l346:
					{
						position348, tokenIndex348 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l349
						}
						position++
						goto l348
					l349:
						position, tokenIndex = position348, tokenIndex348
						if buffer[position] != rune('M') {
							goto l343
						}
						position++
					}
				l348:
					{
						position350, tokenIndex350 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l351
						}
						position++
						goto l350
					l351:
						position, tokenIndex = position350, tokenIndex350
						if buffer[position] != rune('E') {
							goto l343
						}
						position++
					}
				l350:
					goto l342
				l343:
					position, tokenIndex = position342, tokenIndex342
					{
						position352, tokenIndex352 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l353
						}
						position++
						goto l352
					l353:
						position, tokenIndex = position352, tokenIndex352
						if buffer[position] != rune('E') {
							goto l340
						}
						position++
					}
				l352:
					{
						position354, tokenIndex354 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l355
						}
						position++
						goto l354
					l355:
						position, tokenIndex = position354, tokenIndex354
						if buffer[position] != rune('V') {
							goto l340
						}
						position++
					}
				l354:
					{
						position356, tokenIndex356 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l357
						}
						position++
						goto l356
					l357:
						position, tokenIndex = position356, tokenIndex356
						if buffer[position] != rune('E') {
							goto l340
						}
						position++
					}
				l356:
					{
						position358, tokenIndex358 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l359
						}
						position++
						goto l358
					l359:
						position, tokenIndex = position358, tokenIndex358
						if buffer[position] != rune('R') {
							goto l340
						}
						position++
					}
				l358:
					{
						position360, tokenIndex360 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l361
						}
						position++
						goto l360
					l361:
						position, tokenIndex = position360, tokenIndex360
						if buffer[position] != rune('Y') {
							goto l340
						}
						position++
					}
				l360:
				}
			l342:
				if !_rules[ruleName]() {
					goto l340
				}
				{
					position364, tokenIndex364 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l365
					}
					position++
					goto l364
				l365:
					position, tokenIndex = position364, tokenIndex364
					if buffer[position] != rune('I') {
						goto l340
					}
					position++
				}
			l364:
				{
					position366, tokenIndex366 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l367
					}
					position++
					goto l366
				l367:
					position, tokenIndex = position366, tokenIndex366
					if buffer[position] != rune('N') {
						goto l340
					}
					position++
				}
			l366:
				if !_rules[ruleExpression]() {
					goto l340
				}
			l362:
				{
					position363, tokenIndex363 := position, tokenIndex
					if !_rules[ruleName]() {
						goto l363
					}
					{
						position368, tokenIndex368 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l369
						}
						position++
						goto l368
					l369:
						position, tokenIndex = position368, tokenIndex368
						if buffer[position] != rune('I') {
							goto l363
						}
						position++
					}
				l368:
					{
						position370, tokenIndex370 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l371
						}
						position++
						goto l370
					l371:
						position, tokenIndex = position370, tokenIndex370
						if buffer[position] != rune('N') {
							goto l363
						}
						position++
					}
				l370:
					if !_rules[ruleExpression]() {
						goto l363
					}
					goto l362
				l363:
					position, tokenIndex = position363, tokenIndex363
				}
				{
					position372, tokenIndex372 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l373
					}
					position++
					goto l372
				l373:
					position, tokenIndex = position372, tokenIndex372
					if buffer[position] != rune('S') {
						goto l340
					}
					position++
				}
			l372:
				{
					position374, tokenIndex374 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l375
					}
					position++
					goto l374
				l375:
					position, tokenIndex = position374, tokenIndex374
					if buffer[position] != rune('A') {
						goto l340
					}
					position++
				}
			l374:
				{
					position376, tokenIndex376 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l377
					}
					position++
					goto l376
				l377:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('T') {
						goto l340
					}
					position++
				}
			l376:
				{
					position378, tokenIndex378 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l379
					}
					position++
					goto l378
				l379:
					position, tokenIndex = position378, tokenIndex378
					if buffer[position] != rune('I') {
						goto l340
					}
					position++
				}
			l378:
				{
					position380, tokenIndex380 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l381
					}
					position++
					goto l380
				l381:
					position, tokenIndex = position380, tokenIndex380
					if buffer[position] != rune('S') {
						goto l340
					}
					position++
				}
			l380:
				{
					position382, tokenIndex382 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l383
					}
					position++
					goto l382
				l383:
					position, tokenIndex = position382, tokenIndex382
					if buffer[position] != rune('F') {
						goto l340
					}
					position++
				}
			l382:
				{
					position384, tokenIndex384 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l385
					}
					position++
					goto l384
				l385:
					position, tokenIndex = position384, tokenIndex384
					if buffer[position] != rune('I') {
						goto l340
					}
					position++
				}
			l384:
				{
					position386, tokenIndex386 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l387
					}
					position++
					goto l386
				l387:
					position, tokenIndex = position386, tokenIndex386
					if buffer[position] != rune('E') {
						goto l340
					}
					position++
				}
			l386:
				{
					position388, tokenIndex388 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l389
					}
					position++
					goto l388
				l389:
					position, tokenIndex = position388, tokenIndex388
					if buffer[position] != rune('S') {
						goto l340
					}
					position++
				}
			l388:
				if !_rules[ruleExpression]() {
					goto l340
				}
				add(ruleQuantifiedExpression, position341)
			}
			return true
		l340:
			position, tokenIndex = position340, tokenIndex340
			return false
		},
		/* 50 Disjunction <- <(Expression3 (('o' / 'O') ('r' / 'R') Expression3)*)> */
		func() bool {
			position390, tokenIndex390 := position, tokenIndex
			{
				position391 := position
				if !_rules[ruleExpression3]() {
					goto l390
				}
			l392:
				{
					position393, tokenIndex393 := position, tokenIndex
					{
						position394, tokenIndex394 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l395
						}
						position++
						goto l394
					l395:
						position, tokenIndex = position394, tokenIndex394
						if buffer[position] != rune('O') {
							goto l393
						}
						position++
					}
				l394:
					{
						position396, tokenIndex396 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l397
						}
						position++
						goto l396
					l397:
						position, tokenIndex = position396, tokenIndex396
						if buffer[position] != rune('R') {
							goto l393
						}
						position++
					}
				l396:
					if !_rules[ruleExpression3]() {
						goto l393
					}
					goto l392
				l393:
					position, tokenIndex = position393, tokenIndex393
				}
				add(ruleDisjunction, position391)
			}
			return true
		l390:
			position, tokenIndex = position390, tokenIndex390
			return false
		},
		/* 51 Conjunction <- <(Expression4 (('a' / 'A') ('n' / 'N') ('d' / 'D') Expression)*)> */
		func() bool {
			position398, tokenIndex398 := position, tokenIndex
			{
				position399 := position
				if !_rules[ruleExpression4]() {
					goto l398
				}
			l400:
				{
					position401, tokenIndex401 := position, tokenIndex
					{
						position402, tokenIndex402 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l403
						}
						position++
						goto l402
					l403:
						position, tokenIndex = position402, tokenIndex402
						if buffer[position] != rune('A') {
							goto l401
						}
						position++
					}
				l402:
					{
						position404, tokenIndex404 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l405
						}
						position++
						goto l404
					l405:
						position, tokenIndex = position404, tokenIndex404
						if buffer[position] != rune('N') {
							goto l401
						}
						position++
					}
				l404:
					{
						position406, tokenIndex406 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l407
						}
						position++
						goto l406
					l407:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('D') {
							goto l401
						}
						position++
					}
				l406:
					if !_rules[ruleExpression]() {
						goto l401
					}
					goto l400
				l401:
					position, tokenIndex = position401, tokenIndex401
				}
				add(ruleConjunction, position399)
			}
			return true
		l398:
			position, tokenIndex = position398, tokenIndex398
			return false
		},
		/* 52 Comparison <- <((Expression5 ('=' / ('!' '=') / '<' / ('<' '=') / '>' / ('>' '=')) Expression5) / (Expression5 (('b' / 'B') ('e' / 'E') ('t' / 'T') ('w' / 'W') ('e' / 'E') ('e' / 'E') ('n' / 'N')) Expression (('a' / 'A') ('n' / 'N') ('d' / 'D')) Expression) / (Expression5 (('i' / 'I') ('n' / 'N')) '(' PositiveUnaryTests ')') / (Expression5 (('i' / 'I') ('n' / 'N')) PositiveUnaryTest))> */
		func() bool {
			position408, tokenIndex408 := position, tokenIndex
			{
				position409 := position
				{
					position410, tokenIndex410 := position, tokenIndex
					if !_rules[ruleExpression5]() {
						goto l411
					}
					{
						position412, tokenIndex412 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l413
						}
						position++
						goto l412
					l413:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('!') {
							goto l414
						}
						position++
						if buffer[position] != rune('=') {
							goto l414
						}
						position++
						goto l412
					l414:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('<') {
							goto l415
						}
						position++
						goto l412
					l415:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('<') {
							goto l416
						}
						position++
						if buffer[position] != rune('=') {
							goto l416
						}
						position++
						goto l412
					l416:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('>') {
							goto l417
						}
						position++
						goto l412
					l417:
						position, tokenIndex = position412, tokenIndex412
						if buffer[position] != rune('>') {
							goto l411
						}
						position++
						if buffer[position] != rune('=') {
							goto l411
						}
						position++
					}
				l412:
					if !_rules[ruleExpression5]() {
						goto l411
					}
					goto l410
				l411:
					position, tokenIndex = position410, tokenIndex410
					if !_rules[ruleExpression5]() {
						goto l418
					}
					{
						position419, tokenIndex419 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l420
						}
						position++
						goto l419
					l420:
						position, tokenIndex = position419, tokenIndex419
						if buffer[position] != rune('B') {
							goto l418
						}
						position++
					}
				l419:
					{
						position421, tokenIndex421 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l422
						}
						position++
						goto l421
					l422:
						position, tokenIndex = position421, tokenIndex421
						if buffer[position] != rune('E') {
							goto l418
						}
						position++
					}
				l421:
					{
						position423, tokenIndex423 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l424
						}
						position++
						goto l423
					l424:
						position, tokenIndex = position423, tokenIndex423
						if buffer[position] != rune('T') {
							goto l418
						}
						position++
					}
				l423:
					{
						position425, tokenIndex425 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l426
						}
						position++
						goto l425
					l426:
						position, tokenIndex = position425, tokenIndex425
						if buffer[position] != rune('W') {
							goto l418
						}
						position++
					}
				l425:
					{
						position427, tokenIndex427 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l428
						}
						position++
						goto l427
					l428:
						position, tokenIndex = position427, tokenIndex427
						if buffer[position] != rune('E') {
							goto l418
						}
						position++
					}
				l427:
					{
						position429, tokenIndex429 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l430
						}
						position++
						goto l429
					l430:
						position, tokenIndex = position429, tokenIndex429
						if buffer[position] != rune('E') {
							goto l418
						}
						position++
					}
				l429:
					{
						position431, tokenIndex431 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l432
						}
						position++
						goto l431
					l432:
						position, tokenIndex = position431, tokenIndex431
						if buffer[position] != rune('N') {
							goto l418
						}
						position++
					}
				l431:
					if !_rules[ruleExpression]() {
						goto l418
					}
					{
						position433, tokenIndex433 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l434
						}
						position++
						goto l433
					l434:
						position, tokenIndex = position433, tokenIndex433
						if buffer[position] != rune('A') {
							goto l418
						}
						position++
					}
				l433:
					{
						position435, tokenIndex435 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l436
						}
						position++
						goto l435
					l436:
						position, tokenIndex = position435, tokenIndex435
						if buffer[position] != rune('N') {
							goto l418
						}
						position++
					}
				l435:
					{
						position437, tokenIndex437 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l438
						}
						position++
						goto l437
					l438:
						position, tokenIndex = position437, tokenIndex437
						if buffer[position] != rune('D') {
							goto l418
						}
						position++
					}
				l437:
					if !_rules[ruleExpression]() {
						goto l418
					}
					goto l410
				l418:
					position, tokenIndex = position410, tokenIndex410
					if !_rules[ruleExpression5]() {
						goto l439
					}
					{
						position440, tokenIndex440 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l441
						}
						position++
						goto l440
					l441:
						position, tokenIndex = position440, tokenIndex440
						if buffer[position] != rune('I') {
							goto l439
						}
						position++
					}
				l440:
					{
						position442, tokenIndex442 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l443
						}
						position++
						goto l442
					l443:
						position, tokenIndex = position442, tokenIndex442
						if buffer[position] != rune('N') {
							goto l439
						}
						position++
					}
				l442:
					if buffer[position] != rune('(') {
						goto l439
					}
					position++
					if !_rules[rulePositiveUnaryTests]() {
						goto l439
					}
					if buffer[position] != rune(')') {
						goto l439
					}
					position++
					goto l410
				l439:
					position, tokenIndex = position410, tokenIndex410
					if !_rules[ruleExpression5]() {
						goto l408
					}
					{
						position444, tokenIndex444 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l445
						}
						position++
						goto l444
					l445:
						position, tokenIndex = position444, tokenIndex444
						if buffer[position] != rune('I') {
							goto l408
						}
						position++
					}
				l444:
					{
						position446, tokenIndex446 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l447
						}
						position++
						goto l446
					l447:
						position, tokenIndex = position446, tokenIndex446
						if buffer[position] != rune('N') {
							goto l408
						}
						position++
					}
				l446:
					if !_rules[rulePositiveUnaryTest]() {
						goto l408
					}
				}
			l410:
				add(ruleComparison, position409)
			}
			return true
		l408:
			position, tokenIndex = position408, tokenIndex408
			return false
		},
		/* 53 InstanceOf <- <(Expression7 (('i' / 'I') ('n' / 'N') ('s' / 'S') ('t' / 'T') ('a' / 'A') ('n' / 'N') ('c' / 'C') ('e' / 'E')) (('o' / 'O') ('f' / 'F')) Type)> */
		func() bool {
			position448, tokenIndex448 := position, tokenIndex
			{
				position449 := position
				if !_rules[ruleExpression7]() {
					goto l448
				}
				{
					position450, tokenIndex450 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l451
					}
					position++
					goto l450
				l451:
					position, tokenIndex = position450, tokenIndex450
					if buffer[position] != rune('I') {
						goto l448
					}
					position++
				}
			l450:
				{
					position452, tokenIndex452 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l453
					}
					position++
					goto l452
				l453:
					position, tokenIndex = position452, tokenIndex452
					if buffer[position] != rune('N') {
						goto l448
					}
					position++
				}
			l452:
				{
					position454, tokenIndex454 := position, tokenIndex
					if buffer[position] != rune('s') {
						goto l455
					}
					position++
					goto l454
				l455:
					position, tokenIndex = position454, tokenIndex454
					if buffer[position] != rune('S') {
						goto l448
					}
					position++
				}
			l454:
				{
					position456, tokenIndex456 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l457
					}
					position++
					goto l456
				l457:
					position, tokenIndex = position456, tokenIndex456
					if buffer[position] != rune('T') {
						goto l448
					}
					position++
				}
			l456:
				{
					position458, tokenIndex458 := position, tokenIndex
					if buffer[position] != rune('a') {
						goto l459
					}
					position++
					goto l458
				l459:
					position, tokenIndex = position458, tokenIndex458
					if buffer[position] != rune('A') {
						goto l448
					}
					position++
				}
			l458:
				{
					position460, tokenIndex460 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l461
					}
					position++
					goto l460
				l461:
					position, tokenIndex = position460, tokenIndex460
					if buffer[position] != rune('N') {
						goto l448
					}
					position++
				}
			l460:
				{
					position462, tokenIndex462 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l463
					}
					position++
					goto l462
				l463:
					position, tokenIndex = position462, tokenIndex462
					if buffer[position] != rune('C') {
						goto l448
					}
					position++
				}
			l462:
				{
					position464, tokenIndex464 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l465
					}
					position++
					goto l464
				l465:
					position, tokenIndex = position464, tokenIndex464
					if buffer[position] != rune('E') {
						goto l448
					}
					position++
				}
			l464:
				{
					position466, tokenIndex466 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l467
					}
					position++
					goto l466
				l467:
					position, tokenIndex = position466, tokenIndex466
					if buffer[position] != rune('O') {
						goto l448
					}
					position++
				}
			l466:
				{
					position468, tokenIndex468 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l469
					}
					position++
					goto l468
				l469:
					position, tokenIndex = position468, tokenIndex468
					if buffer[position] != rune('F') {
						goto l448
					}
					position++
				}
			l468:
				if !_rules[ruleType]() {
					goto l448
				}
				add(ruleInstanceOf, position449)
			}
			return true
		l448:
			position, tokenIndex = position448, tokenIndex448
			return false
		},
		/* 54 Type <- <QualifiedName> */
		func() bool {
			position470, tokenIndex470 := position, tokenIndex
			{
				position471 := position
				if !_rules[ruleQualifiedName]() {
					goto l470
				}
				add(ruleType, position471)
			}
			return true
		l470:
			position, tokenIndex = position470, tokenIndex470
			return false
		},
		/* 55 PathExpression <- <(Expression8 ('.' Name)* ('[' Expression ']'))> */
		func() bool {
			position472, tokenIndex472 := position, tokenIndex
			{
				position473 := position
				if !_rules[ruleExpression8]() {
					goto l472
				}
			l474:
				{
					position475, tokenIndex475 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l475
					}
					position++
					if !_rules[ruleName]() {
						goto l475
					}
					goto l474
				l475:
					position, tokenIndex = position475, tokenIndex475
				}
				if buffer[position] != rune('[') {
					goto l472
				}
				position++
				if !_rules[ruleExpression]() {
					goto l472
				}
				if buffer[position] != rune(']') {
					goto l472
				}
				position++
				add(rulePathExpression, position473)
			}
			return true
		l472:
			position, tokenIndex = position472, tokenIndex472
			return false
		},
		/* 56 FilterExpression <- <(Expression9 '[' Expression ']')> */
		func() bool {
			position476, tokenIndex476 := position, tokenIndex
			{
				position477 := position
				if !_rules[ruleExpression9]() {
					goto l476
				}
				if buffer[position] != rune('[') {
					goto l476
				}
				position++
				if !_rules[ruleExpression]() {
					goto l476
				}
				if buffer[position] != rune(']') {
					goto l476
				}
				position++
				add(ruleFilterExpression, position477)
			}
			return true
		l476:
			position, tokenIndex = position476, tokenIndex476
			return false
		},
		/* 57 FunctionInvocation <- <(Expression9 Parameters)> */
		func() bool {
			position478, tokenIndex478 := position, tokenIndex
			{
				position479 := position
				if !_rules[ruleExpression9]() {
					goto l478
				}
				if !_rules[ruleParameters]() {
					goto l478
				}
				add(ruleFunctionInvocation, position479)
			}
			return true
		l478:
			position, tokenIndex = position478, tokenIndex478
			return false
		},
		/* 58 Parameters <- <(('(' NamedParameters) / (PositionalParameters ')'))> */
		func() bool {
			position480, tokenIndex480 := position, tokenIndex
			{
				position481 := position
				{
					position482, tokenIndex482 := position, tokenIndex
					if buffer[position] != rune('(') {
						goto l483
					}
					position++
					if !_rules[ruleNamedParameters]() {
						goto l483
					}
					goto l482
				l483:
					position, tokenIndex = position482, tokenIndex482
					if !_rules[rulePositionalParameters]() {
						goto l480
					}
					if buffer[position] != rune(')') {
						goto l480
					}
					position++
				}
			l482:
				add(ruleParameters, position481)
			}
			return true
		l480:
			position, tokenIndex = position480, tokenIndex480
			return false
		},
		/* 59 NamedParameters <- <(ParameterName ':' Expression (',' ParameterName ':' Expression)*)> */
		func() bool {
			position484, tokenIndex484 := position, tokenIndex
			{
				position485 := position
				if !_rules[ruleParameterName]() {
					goto l484
				}
				if buffer[position] != rune(':') {
					goto l484
				}
				position++
				if !_rules[ruleExpression]() {
					goto l484
				}
			l486:
				{
					position487, tokenIndex487 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l487
					}
					position++
					if !_rules[ruleParameterName]() {
						goto l487
					}
					if buffer[position] != rune(':') {
						goto l487
					}
					position++
					if !_rules[ruleExpression]() {
						goto l487
					}
					goto l486
				l487:
					position, tokenIndex = position487, tokenIndex487
				}
				add(ruleNamedParameters, position485)
			}
			return true
		l484:
			position, tokenIndex = position484, tokenIndex484
			return false
		},
		/* 60 ParameterName <- <Name> */
		func() bool {
			position488, tokenIndex488 := position, tokenIndex
			{
				position489 := position
				if !_rules[ruleName]() {
					goto l488
				}
				add(ruleParameterName, position489)
			}
			return true
		l488:
			position, tokenIndex = position488, tokenIndex488
			return false
		},
		/* 61 PositionalParameters <- <(Expression (',' Expression)*)?> */
		func() bool {
			{
				position491 := position
				{
					position492, tokenIndex492 := position, tokenIndex
					if !_rules[ruleExpression]() {
						goto l492
					}
				l494:
					{
						position495, tokenIndex495 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l495
						}
						position++
						if !_rules[ruleExpression]() {
							goto l495
						}
						goto l494
					l495:
						position, tokenIndex = position495, tokenIndex495
					}
					goto l493
				l492:
					position, tokenIndex = position492, tokenIndex492
				}
			l493:
				add(rulePositionalParameters, position491)
			}
			return true
		},
		/* 62 BoxedExpression <- <(List / FunctionDefinition / Context)> */
		func() bool {
			position496, tokenIndex496 := position, tokenIndex
			{
				position497 := position
				{
					position498, tokenIndex498 := position, tokenIndex
					if !_rules[ruleList]() {
						goto l499
					}
					goto l498
				l499:
					position, tokenIndex = position498, tokenIndex498
					if !_rules[ruleFunctionDefinition]() {
						goto l500
					}
					goto l498
				l500:
					position, tokenIndex = position498, tokenIndex498
					if !_rules[ruleContext]() {
						goto l496
					}
				}
			l498:
				add(ruleBoxedExpression, position497)
			}
			return true
		l496:
			position, tokenIndex = position496, tokenIndex496
			return false
		},
		/* 63 List <- <('[' (Expression (',' Expression)*)? ']')> */
		func() bool {
			position501, tokenIndex501 := position, tokenIndex
			{
				position502 := position
				if buffer[position] != rune('[') {
					goto l501
				}
				position++
				{
					position503, tokenIndex503 := position, tokenIndex
					if !_rules[ruleExpression]() {
						goto l503
					}
				l505:
					{
						position506, tokenIndex506 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l506
						}
						position++
						if !_rules[ruleExpression]() {
							goto l506
						}
						goto l505
					l506:
						position, tokenIndex = position506, tokenIndex506
					}
					goto l504
				l503:
					position, tokenIndex = position503, tokenIndex503
				}
			l504:
				if buffer[position] != rune(']') {
					goto l501
				}
				position++
				add(ruleList, position502)
			}
			return true
		l501:
			position, tokenIndex = position501, tokenIndex501
			return false
		},
		/* 64 FunctionDefinition <- <(('f' / 'F') ('u' / 'U') ('n' / 'N') ('c' / 'C') ('t' / 'T') ('i' / 'I') ('o' / 'O') ('n' / 'N') '(' (FormalParameter (',' FormalParameter)*)? ')' (('e' / 'E') ('x' / 'X') ('t' / 'T') ('e' / 'E') ('r' / 'R') ('n' / 'N') ('a' / 'A') ('l' / 'L'))? Expression)> */
		func() bool {
			position507, tokenIndex507 := position, tokenIndex
			{
				position508 := position
				{
					position509, tokenIndex509 := position, tokenIndex
					if buffer[position] != rune('f') {
						goto l510
					}
					position++
					goto l509
				l510:
					position, tokenIndex = position509, tokenIndex509
					if buffer[position] != rune('F') {
						goto l507
					}
					position++
				}
			l509:
				{
					position511, tokenIndex511 := position, tokenIndex
					if buffer[position] != rune('u') {
						goto l512
					}
					position++
					goto l511
				l512:
					position, tokenIndex = position511, tokenIndex511
					if buffer[position] != rune('U') {
						goto l507
					}
					position++
				}
			l511:
				{
					position513, tokenIndex513 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l514
					}
					position++
					goto l513
				l514:
					position, tokenIndex = position513, tokenIndex513
					if buffer[position] != rune('N') {
						goto l507
					}
					position++
				}
			l513:
				{
					position515, tokenIndex515 := position, tokenIndex
					if buffer[position] != rune('c') {
						goto l516
					}
					position++
					goto l515
				l516:
					position, tokenIndex = position515, tokenIndex515
					if buffer[position] != rune('C') {
						goto l507
					}
					position++
				}
			l515:
				{
					position517, tokenIndex517 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l518
					}
					position++
					goto l517
				l518:
					position, tokenIndex = position517, tokenIndex517
					if buffer[position] != rune('T') {
						goto l507
					}
					position++
				}
			l517:
				{
					position519, tokenIndex519 := position, tokenIndex
					if buffer[position] != rune('i') {
						goto l520
					}
					position++
					goto l519
				l520:
					position, tokenIndex = position519, tokenIndex519
					if buffer[position] != rune('I') {
						goto l507
					}
					position++
				}
			l519:
				{
					position521, tokenIndex521 := position, tokenIndex
					if buffer[position] != rune('o') {
						goto l522
					}
					position++
					goto l521
				l522:
					position, tokenIndex = position521, tokenIndex521
					if buffer[position] != rune('O') {
						goto l507
					}
					position++
				}
			l521:
				{
					position523, tokenIndex523 := position, tokenIndex
					if buffer[position] != rune('n') {
						goto l524
					}
					position++
					goto l523
				l524:
					position, tokenIndex = position523, tokenIndex523
					if buffer[position] != rune('N') {
						goto l507
					}
					position++
				}
			l523:
				if buffer[position] != rune('(') {
					goto l507
				}
				position++
				{
					position525, tokenIndex525 := position, tokenIndex
					if !_rules[ruleFormalParameter]() {
						goto l525
					}
				l527:
					{
						position528, tokenIndex528 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l528
						}
						position++
						if !_rules[ruleFormalParameter]() {
							goto l528
						}
						goto l527
					l528:
						position, tokenIndex = position528, tokenIndex528
					}
					goto l526
				l525:
					position, tokenIndex = position525, tokenIndex525
				}
			l526:
				if buffer[position] != rune(')') {
					goto l507
				}
				position++
				{
					position529, tokenIndex529 := position, tokenIndex
					{
						position531, tokenIndex531 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l532
						}
						position++
						goto l531
					l532:
						position, tokenIndex = position531, tokenIndex531
						if buffer[position] != rune('E') {
							goto l529
						}
						position++
					}
				l531:
					{
						position533, tokenIndex533 := position, tokenIndex
						if buffer[position] != rune('x') {
							goto l534
						}
						position++
						goto l533
					l534:
						position, tokenIndex = position533, tokenIndex533
						if buffer[position] != rune('X') {
							goto l529
						}
						position++
					}
				l533:
					{
						position535, tokenIndex535 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l536
						}
						position++
						goto l535
					l536:
						position, tokenIndex = position535, tokenIndex535
						if buffer[position] != rune('T') {
							goto l529
						}
						position++
					}
				l535:
					{
						position537, tokenIndex537 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l538
						}
						position++
						goto l537
					l538:
						position, tokenIndex = position537, tokenIndex537
						if buffer[position] != rune('E') {
							goto l529
						}
						position++
					}
				l537:
					{
						position539, tokenIndex539 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l540
						}
						position++
						goto l539
					l540:
						position, tokenIndex = position539, tokenIndex539
						if buffer[position] != rune('R') {
							goto l529
						}
						position++
					}
				l539:
					{
						position541, tokenIndex541 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l542
						}
						position++
						goto l541
					l542:
						position, tokenIndex = position541, tokenIndex541
						if buffer[position] != rune('N') {
							goto l529
						}
						position++
					}
				l541:
					{
						position543, tokenIndex543 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l544
						}
						position++
						goto l543
					l544:
						position, tokenIndex = position543, tokenIndex543
						if buffer[position] != rune('A') {
							goto l529
						}
						position++
					}
				l543:
					{
						position545, tokenIndex545 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l546
						}
						position++
						goto l545
					l546:
						position, tokenIndex = position545, tokenIndex545
						if buffer[position] != rune('L') {
							goto l529
						}
						position++
					}
				l545:
					goto l530
				l529:
					position, tokenIndex = position529, tokenIndex529
				}
			l530:
				if !_rules[ruleExpression]() {
					goto l507
				}
				add(ruleFunctionDefinition, position508)
			}
			return true
		l507:
			position, tokenIndex = position507, tokenIndex507
			return false
		},
		/* 65 FormalParameter <- <ParameterName> */
		func() bool {
			position547, tokenIndex547 := position, tokenIndex
			{
				position548 := position
				if !_rules[ruleParameterName]() {
					goto l547
				}
				add(ruleFormalParameter, position548)
			}
			return true
		l547:
			position, tokenIndex = position547, tokenIndex547
			return false
		},
		/* 66 Context <- <('{' (ContextEntry (',' ContextEntry)*)? '}')> */
		func() bool {
			position549, tokenIndex549 := position, tokenIndex
			{
				position550 := position
				if buffer[position] != rune('{') {
					goto l549
				}
				position++
				{
					position551, tokenIndex551 := position, tokenIndex
					if !_rules[ruleContextEntry]() {
						goto l551
					}
				l553:
					{
						position554, tokenIndex554 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l554
						}
						position++
						if !_rules[ruleContextEntry]() {
							goto l554
						}
						goto l553
					l554:
						position, tokenIndex = position554, tokenIndex554
					}
					goto l552
				l551:
					position, tokenIndex = position551, tokenIndex551
				}
			l552:
				if buffer[position] != rune('}') {
					goto l549
				}
				position++
				add(ruleContext, position550)
			}
			return true
		l549:
			position, tokenIndex = position549, tokenIndex549
			return false
		},
		/* 67 ContextEntry <- <(Key ':' Expression)> */
		func() bool {
			position555, tokenIndex555 := position, tokenIndex
			{
				position556 := position
				if !_rules[ruleKey]() {
					goto l555
				}
				if buffer[position] != rune(':') {
					goto l555
				}
				position++
				if !_rules[ruleExpression]() {
					goto l555
				}
				add(ruleContextEntry, position556)
			}
			return true
		l555:
			position, tokenIndex = position555, tokenIndex555
			return false
		},
		/* 68 Key <- <(Name / StringLiteral)> */
		func() bool {
			position557, tokenIndex557 := position, tokenIndex
			{
				position558 := position
				{
					position559, tokenIndex559 := position, tokenIndex
					if !_rules[ruleName]() {
						goto l560
					}
					goto l559
				l560:
					position, tokenIndex = position559, tokenIndex559
					if !_rules[ruleStringLiteral]() {
						goto l557
					}
				}
			l559:
				add(ruleKey, position558)
			}
			return true
		l557:
			position, tokenIndex = position557, tokenIndex557
			return false
		},
		nil,
	}
	p.rules = _rules
	return nil
}
